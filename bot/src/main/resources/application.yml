weather:
  api-key: "<YOUR-API-KEY>"
  url-base: "https://api.openweathermap.org"
  data:
    url: "${weather.url-base}/data/2.5"
  geo:
    url: "${weather.url-base}/geo/1.0/direct"
    results-limit: 5

telegram:
  token: "<YOUR TELEGRAM TOKEN>"
  webhook: "https://${telegram.domain}:${micronaut.server.ssl.port}/bot"

micronaut:
  server:
    port: 80
    dual-protocol: true
    ssl:
      enabled: true
      port: 443
    netty:
      log-level: DEBUG
  caches: # Caching with Caffeine https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html#parse-java.lang.CharSequence-
    search-by-name:
      expire-after-write: P1D
    forecast-by-coordinate:
      expire-after-write: PT59M
    weather-by-coordinate:
      expire-after-write: PT59M

flyway:
  datasources:
    default:
      enabled: true

datasources:
  default:
    url: jdbc:h2:${myapp.data-path}/weather;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: "<YOUR DB USERNAME >"
    password: "<YOUR DB PASSWORD >"
    driverClassName: org.h2.Driver

myapp:
  keys-path: file:${myapp.data-path}/keys
  cert-path: ${myapp.data-path}/certificates

jpa:
  default:
    entity-scan:
      packages: "io.github.z0r3f.weather.infrastructure.db.chat.entities"
    properties:
      hibernate:
        hbm2ddl:
          auto: none
        show_sql: true

acme:
  enabled: true
  tos-agree: true
  challenge-type: tls
  domains:
    - "${telegram.domain}"
  domain-key: ${myapp.keys-path}/f5t5-domain
  account-key: ${myapp.keys-path}/f5t5-account
  acme-server: https://acme-v02.api.letsencrypt.org/directory
  cert-location: ${myapp.cert-path}
  refresh:
    delay: 1m
    frequency: 24h
  renew-within: 30d
